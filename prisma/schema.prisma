generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  practiceSession PracticeSession[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  topic         Topic
  text          String
  options       String[]
  correctAnswer String
  difficulty    Difficulty @default(MEDIUM)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  answers Answer[]
}

model PracticeSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  topics    Topic[]
  timeLimit Int // seconds per question
  score     Int
  accuracy  Float
  duration  Int // total session duration in seconds
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  practiceSessionId String @db.ObjectId
  questionId       String @db.ObjectId
  chosenAnswer     String
  isCorrect        Boolean
  timeTaken        Int // milliseconds

  practiceSession PracticeSession @relation(fields: [practiceSessionId], references: [id], onDelete: Cascade)
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum Topic {
  STATISTICS
  DATA_ANALYSIS
  GENERAL_KNOWLEDGE
  VERBAL_REASONING
  APPLIED_MATH
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
